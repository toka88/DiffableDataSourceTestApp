default_platform(:ios)
platform :ios do
 	desc "Create new app"
  	lane :create_app do
		desc "Create new app on AppleDeveloper, AppStoreConnect..."
  		produce
  	end

  	lane :screenshot do
    	snapshot
	end

	desc "Send custom message to slack channel"
	lane :sendInfoToSlack do |options|
		slack(
			message: options[:message],
			success: true,
			slack_url: options[:slack_url],
		)
	end
	  
	desc "Refresh Jenkins keychains"
	lane :refreshJenkinsKeychain do
		delete_keychain(name: "jenkins") if File.exists? File.expand_path("~/Library/Keychains/jenkins-db")
  		create_keychain(
    	name: "jenkins",
    	password: "jenkins",
    	timeout: false,
    	lock_when_sleeps: false,
    	unlock: true
  	)
	end

	desc "Delete keychain"
	lane :deleteJenkinsKeychain do
		delete_keychain(name: "jenkins") if File.exists? File.expand_path("~/Library/Keychains/jenkins-db")
	end

	desc "Fetch certicifates"
	lane :matchPopulateJenkinsKeychain do
		# register_devices(devices_file: "./fastlane/devices.txt")
	  
		match(
		  type: "adhoc",
		  git_url: "https://github.com/toka88/Cerificates.git",
		  app_identifier: [
			"com.digitalatrium.ci.test.app"
		  ]
		)
		match(
		  type: "development",
		  git_url: "https://github.com/toka88/Cerificates.git",
		  app_identifier: [
			"com.digitalatrium.ci.test.app"
		  ]
		)
		match(
		  type: "appstore",
		  git_url: "https://github.com/toka88/Cerificates.git",
		  app_identifier: [
			"com.digitalatrium.ci.test.app"
		  ]
		)
	end

	desc "Install pods."
	lane :installPods do 
		cocoapods(
			clean_install: true,
			podfile: "Podfile"
		  )
	end

	desc "Run SwiftLint"
	lane :runSwiftLint do |options|
		begin
			swiftlint(
				strict: true,
				raise_if_swiftlint_error: true,
				reporter: "html",
				output_file: "fastlane/swiftlint-results.html"
			)
		rescue => exception
			slack(
				message: "SwiftLint failed: #{exception.message}. For more details read console log #{options[:build_url]}console",
				success: false,
				slack_url: options[:slack_url]
			)
			raise exception
		end
	end

	desc "Run unit and ui tests"
	lane :runTests do |options|
		desc "Testing the app"
			scan(
				scheme: "DiffableDataSourceTestApp",
				device: "iPhone 8",
				output_style: "standard",
				reset_simulator: true,
				force_quit_simulator: true,
				deployment_target_version:"13.5",
				slack_only_on_failure: true,
				slack_url: options[:slack_url],
				clean: true
			)
  	end

  	desc "Create coverage html"
  	lane :createCoverageReport do
    	slather(
      		scheme: "DiffableDataSourceTestApp",
      		proj: "DiffableDataSourceTestApp.xcodeproj",
      		html: true,
      		ignore: [
        		"Pods/*",
        		"DiffableDataSourceTestApp/Library/*"
      		]
    	)
  	end

	desc "Upload app to TestFlight and notify testers"
	lane :beta do |options|
	
		refreshJenkinsKeychain
		matchPopulateJenkinsKeychain
		
		increment_build_number(
      			build_number: latest_testflight_build_number() + 1,
      			xcodeproj: "./DiffableDataSourceTestApp.xcodeproj"
    		)
		
		clear_derived_data
  		build_app(
			scheme: "DiffableDataSourceTestApp",
			clean: true
		)

  		# Upload the application to Testflight
		upload_to_testflight(
			skip_waiting_for_build_processing: true,
  			beta_app_feedback_email: "goran.tokovic@digitalatrium.rs",
  			beta_app_description: "Beta app description",
			beta_app_review_info: {
    				contact_email: "goran.tokovic@digitalatrium.rs",
    				contact_first_name: "Goran",
    				contact_last_name: "Tokovic",
    				contact_phone: "+381643513338",
    				demo_account_name: "test@test.com",
    				demo_account_password: "12345678",
    				notes: "this is review note for the reviewer <3 thank you for reviewing"
  			},
			localized_build_info: {
    				"default": {
      					whats_new: "What is new in this version",
    				},
  			},
			groups: ["Public Group"]
		)

		deleteJenkinsKeychain

		slack(
           	message: "Successfully distributed a new beta build",
           	success: true,
           	slack_url: options[:slack_url],
       	)
	end
end